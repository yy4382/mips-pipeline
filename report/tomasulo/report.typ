#set text(font: "Sarasa Gothic SC", lang: "zh")

#show heading.where(level: 2): set block(spacing: 1.5em)

#set figure(numbering: none)

#show link: underline

#show raw.where(block: false): box.with(
  fill: luma(240),
  inset: (x: 3pt, y: 0pt),
  outset: (y: 3pt),
  radius: 2pt,
)

= 指令动态调度性能分析

== 实验内容

实现一个 Tomasulo 算法的模拟器，支持以下功能：

+ 能够模拟 Tomasulo 算法的执行过程，以课堂讲授为参考；
+ 支持图形交互或者命令交互；
+ 支持单步执行（一次一个时钟周期） 、一次多个周期，执行到程序结束；
+ 支持保留站、指令状态表、寄存器状态表等内容的查看（支持对已执行过的时钟周期的上述内容回看）；
+ 提供程序执行后的性能统计分析；
+ 按照 MIPS 语法，至少支持 load、store、add.d、sub.d、mul.d、div.d操作；
+ 要执行的程序可以直接输入，或通过文件载入的方式运行；
+ 可以使用你喜欢的任何语言

== 模拟器设计思想与特色

与上次上机一样，我的模拟器采用 Javascript (TypeScript) 编写。选择 JS 的主要原因是为了方便制作网页前端进行演示，同时可以和上次的上机作业共享部分代码。

整体来看，模拟器分为模拟器本身和展示前端两部分。

=== 汇编器

实现了一个简单的汇编器，支持 `L.D`, `S.D`, `ADD.D`, `SUB.D`, `MUL.D`, `DIV.D` 6 个指令，浮点寄存器用 `$f0` 到 `$f15` 表示（整数寄存器可以用 `$0` 到 `$31` 表示，也可以使用 MIPS 中对 32 个整数寄存器的别名，如 `$t0` 到 `$t9` 等）。

示例：
```asm
L.D $f0, 0($0)
S.D $f0, 0($0)
ADD.D $f0, $f0, $f0
SUB.D $f0, $f0, $f0
MUL.D $f0, $f0, $f0
DIV.D $f0, $f0, $f0
```

=== 模拟器

实现了一个完整的 Tomasulo 算法模拟器。

DMem 的实现做了简化，每个索引位置存储一个 64 位浮点数，而不是一个字节。

合理地处理了 CBD 可用性问题（多指令同时执行结束）、load/store 队列等边缘情况。

支持查看总时钟周期数、已指令指令等性能指标。

=== 前端

前端是一个 React 项目，和上次上机在同一个项目中，可以在 https://mips-pipeline-simulator.vercel.app/tomasulo 上体验运行。

支持的操作：
- 单步执行
- 执行到结束
- 执行到断点
- 直接输入指令
- 载入示例指令
- 修改内存中的值

显示的内容：

- 指令执行状态表
- 保留站状态表（可回看已执行过的时钟周期）
- 寄存器状态表 Qi（可回看已执行过的时钟周期）
- 性能统计信息
- 寄存器的值
- 内存的值

在一些较久版本的浏览器中（比如我测试的 Edge 130），寄存器和内存中值的更新有可能不会立即反映在 UI 上，可能需要手动点击它们两个组件来触发更新（其他显示组件工作的都很好），在更新的 Edge 135 和 Chrome 135 中一切正常。

== 实验演示


